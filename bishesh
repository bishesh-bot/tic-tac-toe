<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            margin: 0;
            overflow: hidden;
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradientBG 15s ease infinite;
            color: white;
        }

        @keyframes gradientBG {
            0% {
                background-position: 0% 50%;
            }
            50% {
                background-position: 100% 50%;
            }
            100% {
                background-position: 0% 50%;
            }
        }

        h1 {
            font-size: 3rem;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
            z-index: 1;
        }

        .game-mode {
            margin-bottom: 30px;
            text-align: center;
            z-index: 1;
        }

        .game-mode h2 {
            font-size: 1.5rem;
            margin-bottom: 15px;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
        }

        button {
            padding: 12px 25px;
            margin: 0 10px;
            font-size: 1rem;
            cursor: pointer;
            background-color: rgba(255, 255, 255, 0.2);
            color: white;
            border: 2px solid white;
            border-radius: 50px;
            transition: all 0.3s;
            backdrop-filter: blur(5px);
            z-index: 1;
        }

        button:hover {
            background-color: rgba(255, 255, 255, 0.3);
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .game-container {
            display: none;
            flex-direction: column;
            align-items: center;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            z-index: 1;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 10px;
            margin-bottom: 20px;
        }

        .cell {
            width: 100px;
            height: 100px;
            background-color: rgba(255, 255, 255, 0.1);
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 3rem;
            font-weight: bold;
            cursor: pointer;
            border-radius: 15px;
            transition: all 0.3s;
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
        }

        .cell:hover {
            background-color: rgba(255, 255, 255, 0.2);
            transform: scale(1.05);
        }

        .status {
            font-size: 1.5rem;
            margin-bottom: 20px;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
        }

        .restart {
            background-color: rgba(255, 99, 71, 0.7);
            padding: 10px 20px;
            font-size: 1rem;
        }

        .restart:hover {
            background-color: rgba(255, 99, 71, 0.9);
        }

        /* Floating bubbles background */
        .bubbles {
            position: absolute;
            width: 100%;
            height: 100%;
            z-index: 0;
            overflow: hidden;
            top: 0;
            left: 0;
        }

        .bubble {
            position: absolute;
            bottom: -100px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            animation: rise 10s infinite ease-in;
        }

        .bubble:nth-child(1) {
            width: 40px;
            height: 40px;
            left: 10%;
            animation-duration: 8s;
        }

        .bubble:nth-child(2) {
            width: 20px;
            height: 20px;
            left: 20%;
            animation-duration: 5s;
            animation-delay: 1s;
        }

        .bubble:nth-child(3) {
            width: 50px;
            height: 50px;
            left: 35%;
            animation-duration: 7s;
            animation-delay: 2s;
        }


        .bubble:nth-child(5) {
            width: 35px;
            height: 35px;
            left: 55%;
            animation-duration: 6s;
            animation-delay: 1s;
        }

        .bubble:nth-child(6) {
            width: 45px;
            height: 45px;
            left: 65%;
            animation-duration: 8s;
            animation-delay: 3s;
        }

        .bubble:nth-child(7) {
            width: 25px;
            height: 25px;
            left: 75%;
            animation-duration: 7s;
            animation-delay: 2s;
        }

        .bubble:nth-child(8) {
            width: 80px;
            height: 80px;
            left: 80%;
            animation-duration: 6s;
            animation-delay: 1s;
        }

        @keyframes rise {
            0% {
                bottom: -100px;
                transform: translateX(0);
            }
            50% {
                transform: translateX(100px);
            }
            100% {
                bottom: 1080px;
                transform: translateX(-200px);
            }
        }

        @media (max-width: 600px) {
            .board {
                grid-template-columns: repeat(3, 80px);
                grid-template-rows: repeat(3, 80px);
            }
            
            .cell {
                width: 80px;
                height: 80px;
                font-size: 2.5rem;
            }
            
            h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <!-- Floating bubbles background -->
    <div class="bubbles">
        <div class="bubble"></div>
        <div class="bubble"></div>
        <div class="bubble"></div>
        <div class="bubble"></div>
        <div class="bubble"></div>
        <div class="bubble"></div>
        <div class="bubble"></div>
        <div class="bubble"></div>
    </div>

    <h1>Tic Tac Toe</h1>
    
    <div class="game-mode">
        <h2>Choose Game Mode:</h2>
        <button id="vsComputer">Play vs Computer</button>
        <button id="vsFriend">Play vs Friend</button>
    </div>
    
    <div class="game-container">
        <div class="status" id="status">Player X's turn</div>
        <div class="board" id="board">
            <div class="cell" data-index="0"></div>
            <div class="cell" data-index="1"></div>
            <div class="cell" data-index="2"></div>
            <div class="cell" data-index="3"></div>
            <div class="cell" data-index="4"></div>
            <div class="cell" data-index="5"></div>
            <div class="cell" data-index="6"></div>
            <div class="cell" data-index="7"></div>
            <div class="cell" data-index="8"></div>
        </div>
        <button class="restart" id="restart">Restart Game</button>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const vsComputerBtn = document.getElementById('vsComputer');
            const vsFriendBtn = document.getElementById('vsFriend');
            const gameContainer = document.querySelector('.game-container');
            const statusDisplay = document.getElementById('status');
            const board = document.getElementById('board');
            const cells = document.querySelectorAll('.cell');
            const restartBtn = document.getElementById('restart');
            
            let gameMode = '';
            let gameActive = true;
            let currentPlayer = 'X';
            let gameState = ['', '', '', '', '', '', '', '', ''];
            
            const winningConditions = [
                [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows
                [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns
                [0, 4, 8], [2, 4, 6]             // diagonals
            ];
            
            // Game mode selection
            vsComputerBtn.addEventListener('click', () => {
                gameMode = 'computer';
                gameContainer.style.display = 'flex';
                vsComputerBtn.parentElement.style.display = 'none';
                initializeGame();
            });
            
            vsFriendBtn.addEventListener('click', () => {
                gameMode = 'friend';
                gameContainer.style.display = 'flex';
                vsFriendBtn.parentElement.style.display = 'none';
                initializeGame();
            });
            
            // Initialize or reinitialize the game
            function initializeGame() {
                gameActive = true;
                currentPlayer = 'X';
                gameState = ['', '', '', '', '', '', '', '', ''];
                statusDisplay.textContent = `Player ${currentPlayer}'s turn`;
                cells.forEach(cell => {
                    cell.textContent = '';
                    cell.style.backgroundColor = 'rgba(255, 255, 255, 0.1)';
                    cell.style.transform = 'scale(1)';
                });
            }
            
            // Handle cell click
            function handleCellClick(clickedCellEvent) {
                const clickedCell = clickedCellEvent.target;
                const clickedCellIndex = parseInt(clickedCell.getAttribute('data-index'));
                
                if (gameState[clickedCellIndex] !== '' || !gameActive) {
                    return;
                }
                
                handlePlayerMove(clickedCell, clickedCellIndex);
                
                if (gameMode === 'computer' && gameActive && currentPlayer === 'O') {
                    setTimeout(computerMove, 500);
                }
            }
            
            // Handle player move
            function handlePlayerMove(cell, index) {
                gameState[index] = currentPlayer;
                cell.textContent = currentPlayer;
                cell.style.color = currentPlayer === 'X' ? '#4CAF50' : '#2196F3';
                cell.style.transform = 'scale(1.1)';
                
                setTimeout(() => {
                    cell.style.transform = 'scale(1)';
                }, 200);
                
                checkResult();
            }
            
            // Computer's move logic
            function computerMove() {
                if (!gameActive) return;
                
                let move = findWinningMove('O') || 
                           findWinningMove('X') || 
                           (gameState[4] === '' ? 4 : null) || 
                           findEmptyCorner() || 
                           findRandomEmptyCell();
                
                if (move !== null) {
                    const cell = document.querySelector(`.cell[data-index="${move}"]`);
                    handlePlayerMove(cell, move);
                }
            }
            
            function findWinningMove(player) {
                for (let condition of winningConditions) {
                    const [a, b, c] = condition;
                    if (gameState[a] === player && gameState[b] === player && gameState[c] === '') return c;
                    if (gameState[a] === player && gameState[c] === player && gameState[b] === '') return b;
                    if (gameState[b] === player && gameState[c] === player && gameState[a] === '') return a;
                }
                return null;
            }
            
            function findEmptyCorner() {
                const corners = [0, 2, 6, 8];
                const emptyCorners = corners.filter(index => gameState[index] === '');
                return emptyCorners.length > 0 ? emptyCorners[Math.floor(Math.random() * emptyCorners.length)] : null;
            }
            
            function findRandomEmptyCell() {
                const emptyCells = gameState.map((cell, index) => cell === '' ? index : null).filter(val => val !== null);
                return emptyCells.length > 0 ? emptyCells[Math.floor(Math.random() * emptyCells.length)] : null;
            }
            
            // Check if the game has been won or is a draw
            function checkResult() {
                let roundWon = false;
                
                for (let i = 0; i < winningConditions.length; i++) {
                    const [a, b, c] = winningConditions[i];
                    
                    if (gameState[a] === '' || gameState[b] === '' || gameState[c] === '') {
                        continue;
                    }
                    
                    if (gameState[a] === gameState[b] && gameState[b] === gameState[c]) {
                        roundWon = true;
                        highlightWinningCells(a, b, c);
                        break;
                    }
                }
                
                if (roundWon) {
                    statusDisplay.textContent = `Player ${currentPlayer} wins!`;
                    gameActive = false;
                    return;
                }
                
                if (!gameState.includes('')) {
                    statusDisplay.textContent = "Game ended in a draw!";
                    gameActive = false;
                    return;
                }
                
                currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
                statusDisplay.textContent = `Player ${currentPlayer}'s turn`;
            }
            
            // Highlight the winning cells
            function highlightWinningCells(a, b, c) {
                const cells = document.querySelectorAll('.cell');
                cells[a].style.backgroundColor = 'rgba(76, 175, 80, 0.3)';
                cells[b].style.backgroundColor = 'rgba(76, 175, 80, 0.3)';
                cells[c].style.backgroundColor = 'rgba(76, 175, 80, 0.3)';
                cells[a].style.transform = 'scale(1.1)';
                cells[b].style.transform = 'scale(1.1)';
                cells[c].style.transform = 'scale(1.1)';
            }
            
            // Event listeners
            cells.forEach(cell => {
                cell.addEventListener('click', handleCellClick);
            });
            
            restartBtn.addEventListener('click', initializeGame);
        });
    </script>
</body>
</html>

        .bubble:nth-child(4) {
            width: 80px;
            height: 80px;
            left: 50%;
            animation-duration: 11s;
            animation-delay: 0s;
        }
